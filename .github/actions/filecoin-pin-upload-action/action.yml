name: "Filecoin Pin Upload"
description: "Pack site into a CAR, upload via filecoin-pin to Filecoin, and publish build artifacts."
branding:
  icon: upload-cloud
  color: blue

inputs:
  github_token:
    description: GitHub token for commenting and artifacts. Defaults to workflow token.
    required: false
  privateKey:
    description: Required. Wallet private key used to fund uploads (USDFC on Calibration/Mainnet).
    required: true
  path:
    description: Path to content to upload (file or directory). Typically your build output directory.
    required: false
    default: dist
  minDays:
    description: "Minimum runway (days) to keep current spend alive. Security note: on PRs, authors can change this."
    required: false
    default: "10"
  minBalance:
    description: "Minimum deposit balance to maintain in Filecoin Pay (USDFC). Security note: on PRs, authors can change this."
    required: false
  maxTopUp:
    description: Maximum allowed additional deposit during this run (USDFC). Strongly recommended to cap PR spend.
    required: false
  token:
    description: Payment token identifier. Currently only "USDFC" is supported; address override reserved for future.
    required: false
    default: "USDFC"
  withCDN:
    description: If true, request CDN in the storage context (depends on provider capabilities).
    required: false
    default: "false"
  providerAddress:
    description: Optional override for storage provider address (on Calibration/Mainnet). Defaults to a known good provider on Calibration.
    required: false
    default: "0xa3971A7234a3379A1813d9867B531e7EeB20ae07"

outputs:
  root_cid:
    description: IPFS Root CID
    value: ${{ steps.run.outputs.root_cid }}
  data_set_id:
    description: Synapse Data Set ID
    value: ${{ steps.run.outputs.data_set_id }}
  piece_cid:
    description: Filecoin Piece CID
    value: ${{ steps.run.outputs.piece_cid }}
  provider_id:
    description: Storage Provider ID
    value: ${{ steps.run.outputs.provider_id }}
  provider_name:
    description: Storage Provider Name
    value: ${{ steps.run.outputs.provider_name }}
  car_path:
    description: Path to the created CAR file
    value: ${{ steps.run.outputs.car_path }}
  metadata_path:
    description: Path to JSON with upload metadata
    value: ${{ steps.run.outputs.metadata_path }}

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'

    - name: Install action deps
      shell: bash
      working-directory: .github/actions/filecoin-pin-upload-action
      run: |
        npm install --no-audit --no-fund

    - name: Compute root + CAR
      id: compute
      shell: bash
      working-directory: .github/actions/filecoin-pin-upload-action
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.privateKey }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        ACTION_PHASE: compute
      run: |
        node run.mjs

    - name: Restore upload cache
      id: cache-restore
      uses: actions/cache/restore@v4
      with:
        key: filecoin-pin-v1-${{ steps.compute.outputs.root_cid }}
        path: .filecoin-pin-cache/${{ steps.compute.outputs.root_cid }}

    - name: Use cached metadata
      if: ${{ steps.cache-restore.outputs.cache-hit == 'true' }}
      id: from-cache
      shell: bash
      working-directory: .github/actions/filecoin-pin-upload-action
      env:
        CACHE_DIR: ${{ github.workspace }}/.filecoin-pin-cache/${{ steps.compute.outputs.root_cid }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.privateKey }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        PREPARED_CAR_PATH: ${{ steps.compute.outputs.car_path }}
        PREPARED_ROOT_CID: ${{ steps.compute.outputs.root_cid }}
        ACTION_PHASE: from-cache
      run: |
        node run.mjs

    - name: Find previous artifact by Root CID
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
      id: find-artifact
      uses: actions/github-script@v7
      env:
        ROOT_CID: ${{ steps.compute.outputs.root_cid }}
      with:
        github-token: ${{ inputs.github_token || github.token }}
        script: |
          const { owner, repo } = context.repo
          const ROOT_CID = process.env.ROOT_CID
          const targetName = `filecoin-pin-${ROOT_CID}`
          const items = await github.paginate(github.rest.actions.listArtifactsForRepo, { owner, repo, per_page: 100 })
          const found = items.find(a => a.name === targetName && !a.expired)
          if (found) {
            core.setOutput('artifact_id', String(found.id))
            core.setOutput('run_id', String(found.workflow_run?.id || ''))
          } else {
            core.setOutput('artifact_id', '')
            core.setOutput('run_id', '')
          }

    - name: Download previous artifact
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id != '' }}
      uses: actions/download-artifact@v4
      with:
        name: filecoin-pin-${{ steps.compute.outputs.root_cid }}
        run-id: ${{ steps.find-artifact.outputs.run_id }}
        path: filecoin-pin-artifacts-restore

    - name: Use artifact metadata
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id != '' }}
      id: from-artifact
      shell: bash
      working-directory: .github/actions/filecoin-pin-upload-action
      env:
        CACHE_DIR: ${{ github.workspace }}/filecoin-pin-artifacts-restore
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.privateKey }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        FROM_ARTIFACT: "true"
        ACTION_PHASE: from-cache
      run: |
        node run.mjs

    - name: Upload via filecoin-pin
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' && steps.find-artifact.outputs.artifact_id == '' }}
      id: run
      shell: bash
      working-directory: .github/actions/filecoin-pin-upload-action
      env:
        INPUT_GITHUB_TOKEN: ${{ inputs.github_token }}
        INPUT_PRIVATEKEY: ${{ inputs.privateKey }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_MINDAYS: ${{ inputs.minDays }}
        INPUT_MINBALANCE: ${{ inputs.minBalance }}
        INPUT_MAXTOPUP: ${{ inputs.maxTopUp }}
        INPUT_WITHCDN: ${{ inputs.withCDN }}
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_PROVIDERADDRESS: ${{ inputs.providerAddress }}
        ACTION_PHASE: upload
        PREPARED_CAR_PATH: ${{ steps.compute.outputs.car_path }}
        PREPARED_ROOT_CID: ${{ steps.compute.outputs.root_cid }}
      run: |
        node run.mjs

    - name: Save upload cache
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        key: filecoin-pin-v1-${{ steps.compute.outputs.root_cid }}
        path: .filecoin-pin-cache/${{ steps.compute.outputs.root_cid }}

    - name: Upload CAR + metadata artifacts
      if: ${{ (steps.run.outputs.car_path || steps.from-cache.outputs.car_path || steps.from-artifact.outputs.car_path) != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: filecoin-pin-${{ steps.run.outputs.root_cid || steps.from-cache.outputs.root_cid || steps.from-artifact.outputs.root_cid || steps.compute.outputs.root_cid }}
        path: |
          ${{ steps.run.outputs.car_path || steps.from-cache.outputs.car_path || steps.from-artifact.outputs.car_path }}
          ${{ steps.run.outputs.metadata_path || steps.from-cache.outputs.metadata_path || steps.from-artifact.outputs.metadata_path }}

    - name: Comment on PR with IPFS Root CID
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      uses: actions/github-script@v7
      env:
        IPFS_ROOT_CID: ${{ steps.run.outputs.root_cid || steps.from-cache.outputs.root_cid || steps.from-artifact.outputs.root_cid }}
        DATA_SET_ID: ${{ steps.run.outputs.data_set_id || steps.from-cache.outputs.data_set_id || steps.from-artifact.outputs.data_set_id }}
        PIECE_CID: ${{ steps.run.outputs.piece_cid || steps.from-cache.outputs.piece_cid || steps.from-artifact.outputs.piece_cid }}
        UPLOAD_STATUS: ${{ steps.run.outputs.upload_status || steps.from-cache.outputs.upload_status || steps.from-artifact.outputs.upload_status }}
      with:
        github-token: ${{ inputs.github_token || github.token }}
        script: |
          const { IPFS_ROOT_CID, DATA_SET_ID, PIECE_CID, UPLOAD_STATUS } = process.env
          const preview = 'https://ipfs.io/ipfs/' + IPFS_ROOT_CID
          let statusLine = '- Status: '
          if (UPLOAD_STATUS === 'uploaded') statusLine += 'Uploaded new content'
          else if (UPLOAD_STATUS === 'reused-cache') statusLine += 'Reused cached content'
          else if (UPLOAD_STATUS === 'reused-artifact') statusLine += 'Reused artifact content'
          else statusLine += 'Unknown (see job logs)'
          const body = [
            '<!-- filecoin-pin-upload-action -->',
            'Filecoin Pin Upload âœ…',
            '',
            '- IPFS Root CID: `' + IPFS_ROOT_CID + '`',
            '- Data Set ID: `' + DATA_SET_ID + '`',
            '- Piece CID: `' + PIECE_CID + '`',
            '',
            statusLine,
            '',
            '- Preview (temporary centralized gateway):',
            '  - ' + preview,
          ].join('\n')

          const { owner, repo } = context.repo
          const issue_number = context.issue.number
          const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number })
          const existing = comments.find(c => c.user?.type === 'Bot' && (c.body || '').includes('filecoin-pin-upload-action'))
          if (existing) {
            await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body })
          } else {
            await github.rest.issues.createComment({ owner, repo, issue_number, body })
          }
